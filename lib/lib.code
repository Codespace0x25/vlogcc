// lib.code â€” vlog standard library externs and basics

// --- Standard includes ---
#include <stddef.h>
#include <sys/syscall.h>
#include <unistd.h>
#include <stdio.h>
#include <math.h>
#include <stdarg.h>




// --- C Standard Library externs ---
//io
// output


// colors
macro term_RESET    "\033[0m"
macro term_BOLD     "\033[1m"
macro term_UNDER    "\033[4m"

macro term_BLACK    "\033[30m"
macro term_RED      "\033[31m"
macro term_GREEN    "\033[32m"
macro term_YELLOW   "\033[33m"
macro term_BLUE     "\033[34m"
macro term_MAGENTA  "\033[35m"
macro term_CYAN     "\033[36m"
macro term_WHITE    "\033[37m"

macro term_BGBLACK  "\033[40m"
macro term_BGRED    "\033[41m"
macro term_BGGREEN  "\033[42m"
macro term_BGYELLOW "\033[43m"
macro term_BGRBLUE  "\033[44m"
macro term_BGMAG    "\033[45m"
macro term_BGCYAN   "\033[46m"
macro term_BGWHITE  "\033[47m"



// dont use this deperaceted(bad girl\bad boy\bad nd)
extern int puts(const char *);
//          |
//          |
//          |
// use this V

extern int printf(const char *restrict, ...);
extern int fprintf(FILE *restrict stream, const char *restrict format, ...);
extern int sprintf(char *restrict str, const char *restrict format, ...);
extern int snprintf(char *restrict str, size_t size, const char *restrict format, ...);
extern int vprintf(const char *restrict format, va_list ap);
extern int vfprintf(FILE *restrict stream, const char *restrict format, va_list ap);
extern int vdprintf(int fd, const char *restrict format, va_list ap);
extern int vsnprintf(char *restrict str, size_t size, const char *restrict format, va_list ap);

// --- Input ---


// dont use this deperaceted(bad girl\bad boy\bad nd)
extern char *gets(char *s); 
//          |
//          |
//          |
// use this V

extern int scanf(const char *restrict format, ...);
extern int fscanf(FILE *restrict stream, const char *restrict format, ...);
extern int sscanf(const char *restrict str, const char *restrict format, ...);
extern int getchar(void);
extern int fgetc(FILE *stream);
extern char *fgets(char *s, int size, FILE *stream);

// --- File I/O and Streams ---


// Open and close
extern FILE *fopen(const char *restrict pathname, const char *restrict mode);
extern FILE *freopen(const char *restrict pathname, const char *restrict mode, FILE *restrict stream);
extern int fclose(FILE *stream);

// Reading
extern int fgetc(FILE *stream);
extern char *fgets(char *s, int size, FILE *stream);
extern size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

// tmpnam parameter as char pointer (keep it simple, warnings may appear otherwise)

// Writing
extern int fputc(int c, FILE *stream);
extern int fputs(const char *s, FILE *stream);
extern size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

// Formatted input/output
extern int fprintf(FILE *restrict stream, const char *restrict format, ...);
extern int fscanf(FILE *restrict stream, const char *restrict format, ...);

// Positioning
extern int fseek(FILE *stream, long offset, int whence);
extern long ftell(FILE *stream);
extern void rewind(FILE *stream);

// Error and EOF
extern int feof(FILE *stream);
extern int ferror(FILE *stream);
extern void clearerr(FILE *stream);

// Temporary files
extern FILE *tmpfile(void);
extern char *tmpnam(char s[L_tmpnam]);

// Buffering
extern void setbuf(FILE *stream, char *buf);
extern int setvbuf(FILE *stream, char *buf, int mode, size_t size);

// Flush
extern int fflush(FILE *stream);

// Standard streams
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;


// heap
extern void *malloc(size_t);
extern void *calloc(size_t, size_t);
extern void *realloc(void *, size_t);
extern void free(void *);

extern void exit(int);
extern void abort(void);
extern int atexit(void (*)(void));

// memory operations
extern void *memcpy(void *, const void *, size_t);
extern void *memmove(void *, const void *, size_t);
extern void *memset(void *, int, size_t);
extern int memcmp(const void *, const void *, size_t);

// string operations
extern size_t strlen(const char *);
extern int strcmp(const char *, const char *);
extern char *strcpy(char *, const char *);
extern char *strncpy(char *, const char *, size_t);
extern char *strcat(char *, const char *);
extern char *strncat(char *, const char *, size_t);
extern char *strchr(const char *, int);
extern char *strstr(const char *, const char *);
defun strdup(char* s) char*{
    size_t len = strlen(s);
    mut char* copy = malloc(len + 1);
    if (copy) memcpy(copy, s, len + 1);
    return copy;
}


// conversion functions
extern int atoi(const char *);
extern long atol(const char *);
extern double atof(const char *);

// random and time
extern int rand(void);
extern void srand(unsigned int);

// --- C time functions ---
extern long time(long *t);
extern long clock(void);

// syscall interface
extern long syscall(long, ...);

// --- vlog standard library functions ---

defun rand_int(int min, int max) int {
    mut unsigned int seed = (unsigned int)time(NULL) ^ (unsigned int)clock();
    seed ^= (unsigned int)min; // Add memory address noise
    srand(seed);
    return (rand() % (max - min + 1)) + min;
}

// --- Simple vector  ---

type vector{
    void **items
    int capacity
    int length
} 

defun vector_init(vector *v) void {
    v->capacity = 16;
    v->length = 0;
    v->items = malloc(sizeof(void *) * (size_t)v->capacity);
}

defun vector_push(vector *v, void *item) void {
    if (v->length >= v->capacity) {
        v->capacity *= 2;
        v->items = realloc(v->items, sizeof(void *) * (size_t)v->capacity);
    }
    v->items[v->length] = item;
    v->length += 1;
}

defun vector_get(vector *v, int index) void* {
    if (index < 0 || index >= v->length) {
        return NULL;
    }
    return v->items[index];
}

defun vector_free(vector *v) void {
    free(v->items);
    v->items = NULL;
    v->capacity = 0;
    v->length = 0;
}

// --- Hashmap implementation ---

type hashmap_entry {
    char *key;
    void *value;
    int in_use; // 0 = empty, 1 = occupied
} 

type  hashmap{ 
    hashmap_entry *entries;
    int capacity;
    int length;
}

void hashmap_resize(hashmap *map, int new_capacity);
defun hashmap_init(hashmap *map, int initial_capacity) void {
    map->capacity = initial_capacity > 0 ? initial_capacity : 16;
    map->length = 0;
    map->entries = malloc(sizeof(hashmap_entry) * (size_t)map->capacity);
    for (int i = 0; i < map->capacity; i++) {
        map->entries[i].in_use = 0;
        map->entries[i].key = NULL;
        map->entries[i].value = NULL;
    }
}

defun djb2_hash(const char *str) long {
    mut unsigned long hash = 5381;
    mut int c;
    while ((c = *str++)) {
        hash = ((hash << 5) + hash) + (unsigned char)c; // hash * 33 + c
    }
    return (long int)hash;
}

defun hashmap_set(hashmap *map, char *key, void *value) void {
    if (map->length * 2 >= map->capacity) {
        hashmap_resize(map, map->capacity * 2);
    }
    unsigned long hash = (long unsigned) djb2_hash(key);
    int index = (int)(hash % (unsigned long)map->capacity);
    while (map->entries[index].in_use == 1) {
        if (strcmp(map->entries[index].key, key) == 0) {
            map->entries[index].value = value;
            return;
        }
        index = (index + 1) % map->capacity;
    }
    map->entries[index].key = key;
    map->entries[index].value = value;
    map->entries[index].in_use = 1;
    map->length += 1;
}

defun hashmap_get(hashmap *map, char *key) void* {
    mut unsigned long hash = (unsigned)djb2_hash(key);
    mut int index = (int)(hash % (unsigned)map->capacity);
    while (map->entries[index].in_use != 0) {
        if (map->entries[index].in_use == 1 &&
            strcmp(map->entries[index].key, key) == 0) {
            return map->entries[index].value;
        }
        index = (index + 1) % map->capacity;
    }
    return NULL;
}

defun hashmap_resize(hashmap *map, int new_capacity) void {
    hashmap_entry *old_entries = map->entries;
    int old_capacity = map->capacity;

    map->entries = malloc(sizeof(hashmap_entry) * (size_t)new_capacity);
    map->capacity = new_capacity;
    map->length = 0;

    for (int i = 0; i < new_capacity; i++) {
        map->entries[i].in_use = 0;
        map->entries[i].key = NULL;
        map->entries[i].value = NULL;
    }

    for (int i = 0; i < old_capacity; i++) {
        if (old_entries[i].in_use == 1) {
            hashmap_set(map, old_entries[i].key, old_entries[i].value);
        }
    }

    free(old_entries);
}

defun hashmap_free(hashmap *map) void {
    free(map->entries);
    map->entries = NULL;
    map->capacity = 0;
    map->length = 0;
}

// String structure and functions

type String {
    char* data;
    size_t len;
    size_t cap;
}

defun string_new(void) String {
    mut String s;
    s.cap = 16;
    s.len = 0;
    s.data = malloc(s.cap);
    if (s.data != NULL) {
        s.data[0] = '\0';
    }
    return s;
}

defun string_from(char* src) String {
    mut size_t slen = strlen(src);
    mut String s;
    s.cap = slen + 1;
    s.len = slen;
    s.data = malloc(s.cap);
    if (s.data != NULL) {
        memcpy(s.data, src, slen + 1);
    }
    return s;
}

defun string_free(String* s) void {
    if (s != NULL && s->data != NULL) {
        free(s->data);
        s->data = NULL;
        s->len = 0;
        s->cap = 0;
    }
}

defun string_push(String* s, char c) void {
    if (s->len + 1 >= s->cap) {
        s->cap = s->cap * 2;
        s->data = realloc(s->data, s->cap);
    }
    s->data[s->len] = c;
    s->len = s->len + 1;
    s->data[s->len] = '\0';
}

defun string_append(String* s, const char* suffix) void {
    mut size_t slen = strlen(suffix);
    if (s->len + slen >= s->cap) {
        while (s->len + slen >= s->cap) {
            s->cap = s->cap * 2;
        }
        s->data = realloc(s->data, s->cap);
    }
    memcpy(s->data + s->len, suffix, slen + 1);
    s->len = s->len + slen;
}

defun string_clear(String* s) void {
    s->len = 0;
    if (s->data != NULL) {
        s->data[0] = '\0';
    }
}



// math



macro PI_M 3.1415926535

type Vec2 {
    float x;
    float y;
}

type Vec3 {
    float x;
    float y;
    float z;
}


